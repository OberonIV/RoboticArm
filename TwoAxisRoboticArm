#include <Stepper.h>
#include <Servo.h>
#include <gcode.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define NUMCOMMANDS 9
#define STEPS_PER_REV 2048  // 28BYJ-48 stepper steps per revolution
#define STEPS_MM 10         // Steps per mm for 28BYJ-48 (adjust as needed)
#define OLED_RESET 4
#define EMERGENCY_STOP_PIN 7 // Emergency stop switch pin

// Stepper motor pins
#define STEP_IN1 8
#define STEP_IN2 9
#define STEP_IN3 10
#define STEP_IN4 11

// Servo pin
#define SERVO_PIN 3

Adafruit_SSD1306 display(OLED_RESET);

// Stepper motor initialization
Stepper stepperMotor(STEPS_PER_REV, STEP_IN1, STEP_IN3, STEP_IN2, STEP_IN4);
Servo toolServo;

bool absolutePositioning = true; // G90: Absolute mode, G91: Relative mode
bool useMM = true;  // G21: mm mode, G20: inch mode
bool emergencyStop = false; // Flag for emergency stop

// Current position
double position = 0;
int p1 = 0;
int p2 = 0;
int p3 = 0;

void homing();
void moveLinear();
void setAbsolute();
void setRelative();
void setInches();
void setMillimeters();
void endProgram();
void toolChange();
void drawProgress(const char* message);
void checkEmergencyStop();

commandscallback commands[NUMCOMMANDS] = {
  {"G28", homing}, {"G0", moveLinear}, {"G1", moveLinear},
  {"G90", setAbsolute}, {"G91", setRelative},
  {"G20", setInches}, {"G21", setMillimeters},
  {"M2", endProgram}, {"M6", toolChange}
};

gcode Commands(NUMCOMMANDS, commands);

void setup() {
  Commands.begin();
  stepperMotor.setSpeed(10); // Adjust speed as needed
  toolServo.attach(SERVO_PIN);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  Serial.begin(9600);
  pinMode(EMERGENCY_STOP_PIN, INPUT_PULLUP); // Set emergency stop pin
  drawProgress("Awaiting input");
}

void loop() {
  checkEmergencyStop();
  if (!emergencyStop) {
    Commands.available();
  }
}

void moveServoSlowly(int startAngle, int endAngle, int stepDelay) {
  int step = (startAngle < endAngle) ? 1 : -1; // Determine direction

  for (int angle = startAngle; angle != endAngle; angle += step) {
    if (emergencyStop) break;  // Stop if emergency stop is triggered
    toolServo.write(angle);
    delay(stepDelay);  // Adjust delay for smoother movement
  }
}

void homing() {
  drawProgress("Homing...");
  position = 0;
  Commands.comment("Homing completed.");
  drawProgress("Finished");
}

void moveLinear() {
  if (emergencyStop) return;
  drawProgress("Drawing...");

  double newX = position;
  if (Commands.availableValue('X')) newX = Commands.GetValue('X');
  double newY = 0; // Default Y axis value
  if (Commands.availableValue('Y')) newY = Commands.GetValue('Y');

  if (!absolutePositioning) {
    newX += position;
  }

  int stepsX = (newX - position) * STEPS_MM;
  int totalSteps = abs(stepsX);  // Number of steps to take
  int stepDirection = (stepsX > 0) ? 1 : -1; // Step direction

  // Slow servo movement (Y mapped to servo angle)
  int startAngle = toolServo.read();
  int targetAngle = map(newY, 0, 10, 0, 180); // Adjust range as needed
  moveServoSlowly(startAngle, targetAngle, 5); // Adjust delay as needed

  // Stepper moves in small steps while allowing other tasks to run
  for (int i = 0; i < totalSteps; i++) {
    if (emergencyStop) break;  // Stop immediately if emergency triggered
    stepperMotor.step(stepDirection); // Move one step
    delay(2); // Small delay to allow both to move together
  }

  position = newX;
  Commands.comment("Moved to X:" + String(newX) + " Y:" + String(newY));
  drawProgress("Finished");
}


void setAbsolute() {
  absolutePositioning = true;
  Commands.comment("Set to absolute positioning (G90)");
}

void setRelative() {
  absolutePositioning = false;
  Commands.comment("Set to relative positioning (G91)");
}

void setInches() {
  useMM = false;
  Commands.comment("Set to inches mode (G20)");
}

void setMillimeters() {
  useMM = true;
  Commands.comment("Set to millimeters mode (G21)");
}

void endProgram() {
  Commands.comment("Program ended (M2)");
  drawProgress("Awaiting input");
}

void toolChange() {
  if (emergencyStop) return;
  drawProgress("Tool Changing...");
  
  int currentAngle = toolServo.read(); // Read the current position
  int targetAngle = 90; // Target angle for tool change position
  moveServoSlowly(currentAngle, targetAngle, 5); // Move to target angle slowly
  
  delay(1000); // Pause before returning
  
  targetAngle = 0; // Move back to original position
  moveServoSlowly(toolServo.read(), targetAngle, 5);

  Commands.comment("Tool change complete (M6)");
  drawProgress("Finished");
}
void checkEmergencyStop() {
  if (digitalRead(EMERGENCY_STOP_PIN) == LOW) { // LOW means the switch is pressed
    if (!emergencyStop) { // Prevent spamming messages
      emergencyStop = true;
      Commands.comment("Emergency Stop Activated!");
      drawProgress("Emergency Stop");
    }
  } else {
    if (emergencyStop) { // Prevent unnecessary resets
      emergencyStop = false;
      Commands.comment("Emergency Stop Cleared!");
      drawProgress("Resuming...");
    }
  }
}
void drawProgress(const char* message) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 25);
  display.print(message);
  display.display();
}
